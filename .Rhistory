#             matrix(log(c(mean(V_est[trans.rep$time.h[which((T_obs-S_obs)>0)]<240]),
#             var(V_est[trans.rep$time.h[which((T_obs-S_obs)>0)]<240]))),2,1)))
# Check agreement betwwen hisotgram of observed and curve of gamma priors for equilibrium
# Spore - equilibrium phase
hist(S_obs[trans.rep$time.h<6000], freq = F)
curve(dgamma(x, S_par.eq[1], S_par.eq[2]), from = min(S_obs), to = max(S_obs), add = T)
# Spore - equilibrium phase
hist(V_est[trans.rep$time.h[which((T_obs-S_obs)>0)]<6000], freq = F)
curve(dgamma(x,V_par.eq[1], V_par.eq[2]),
from =min(V_est[trans.rep$time.h[which((T_obs-S_obs)>0)]<6000]),
to = max(V_est[trans.rep$time.h[which((T_obs-S_obs)>0)]<6000]), add = T)
mod<-"model{
for(i in 1:n){
V[i]~dgamma(v_alpha2,v_beta2)
S[i]~dgamma(s_alpha2,s_beta2)
# Set up observation model as acutal values plus observation error
Sobs[i]~dnorm(S[i],tau.to)
Tobs[i]~dnorm(V[i]+S[i],tau.so)
}
# Set some priors (what decisions are made here?)
sig.v~dunif(0,1000)
tau.v <- pow(sig.v,-2)
sig.s~dunif(0,1000)
tau.s <- pow(sig.v,-2)
sig.so~dunif(0,1000)
sig.to~dunif(0,1000)
tau.so <- pow(sig.so,-2)
tau.to <- pow(sig.to,-2)
}"
# Grab the data we want to feed it
#jdata <- list('n' = nrow(trans.rep), 'Sobs' = S_obs, "Tobs" = T_obs, "v_alpha1" = V_par.tr[1],
#        "v_beta1" = V_par.tr[2], "s_alpha1" = S_par.tr[1], "s_beta1" = S_par.tr[2],"v_alpha2" = V_par.eq[1],
#        "v_beta2" = V_par.eq[2], "s_alpha2" = S_par.eq[1], "s_beta2" = S_par.eq[2])
jdata <- list('n' = nrow(trans.rep), 'Sobs' = S_obs, "Tobs" = T_obs,
"v_alpha2" = V_par.eq[1],
"v_beta2" = V_par.eq[2], "s_alpha2" = S_par.eq[1], "s_beta2" = S_par.eq[2])
# Initialize the model
tot.mod <- jags.model(textConnection(mod), data = jdata, n.chains = 5)
# Burn-in: autoupdating until model converges
update(tot.mod, 1000)
# Get samples from it for what we are intested: V, S and the obs errors
# Creates output with n.iter samples per chain
fit.mod <- coda.samples(tot.mod, c('V','S','sig.to','sig.so'), n.iter = 5000)
# Get summary of our 5 chains (i.e., number of Markov chains)
f <- summary(fit.mod)
f$statistics[grep("S",rownames(f$statistics)),]
f$quantiles[grep("S",rownames(f$quantiles)),]
# Look at V values
f$statistics[grep("V",rownames(f$statistics)),]
f$quantiles[grep("V",rownames(f$quantiles)),]
time <- trans.rep$time.d
s.est <- f$statistics[grep("S",rownames(f$statistics)),1]
v.est <- f$statistics[grep("V",rownames(f$statistics)),1]
s.lower <- f$quantiles[grep("S",rownames(f$quantiles)),1]
s.upper <- f$quantiles[grep("S",rownames(f$quantiles)),5]
v.est <- f$statistics[grep("V",rownames(f$statistics)),1]
v.lower <- f$quantiles[grep("V",rownames(f$quantiles)),1]
v.upper <- f$quantiles[grep("V",rownames(f$quantiles)),5]
data2 <- data.frame(time, s.est,s.lower,s.upper, v.est,v.lower,v.upper)
write.table(data2, "data/scout.bayes.repB.txt", sep = "\t", col.names = T, row.names = F)
trans.rep <- trans.C
T_obs <- trans.rep$tot.ab
S_obs <- trans.rep$spo.ab
# Get informative priors for S and vegetative cells (V) based on observed values
# Start by putting a gamma prior on S and V.
# We wil get parameters for those distributions using the method of moments:
# mean(x) = a/b; var(x) = a/b^2
# where a is shape parameter and b is an inverse scale parameter of gamma distribution
# Taking the log of both sides of each equation, we get a system of linear equations
# Let's do this for S_obs for two parts of the time series:
# equilbirum phase (S_par.eq) after 240 hrs and transition phase (S_par.tr) 0-240 hrs.
S_par.eq <- exp(solve(matrix(c(1,1,-1,-2),2,2), matrix(log(c(mean(S_obs[trans.rep$time.h<6000]),
var(S_obs[trans.rep$time.h<6000]))),2,1)))
#
# S_par.tr <- exp(solve(matrix(c(1,1,-1,-2),2,2), matrix(log(c(mean(S_obs[trans.rep$time.h<240]),
#             var(S_obs[trans.rep$time.h<240]))),2,1)))
#
# # Now for V_est (our ugly inital estimate of V where we ignore negatives)
V_est <- (T_obs-S_obs)[which((T_obs-S_obs)<6000)]
V_par.eq <- exp(solve(matrix(c(1,1,-1,-2),2,2),
matrix(log(c(mean(V_est[trans.rep$time.h[which((T_obs-S_obs)>0)]>0]),
var(V_est[trans.rep$time.h[which((T_obs-S_obs)>0)]<6000]))),2,1)))
# Spore - equilibrium phase
hist(S_obs[trans.rep$time.h<6000], freq = F)
curve(dgamma(x, S_par.eq[1], S_par.eq[2]), from = min(S_obs), to = max(S_obs), add = T)
# Spore - equilibrium phase
hist(V_est[trans.rep$time.h[which((T_obs-S_obs)>0)]<6000], freq = F)
curve(dgamma(x,V_par.eq[1], V_par.eq[2]),
from =min(V_est[trans.rep$time.h[which((T_obs-S_obs)>0)]<6000]),
to = max(V_est[trans.rep$time.h[which((T_obs-S_obs)>0)]<6000]), add = T)
#curve(dgamma(x,V_par.tr[1], V_par.tr[2]),
#            from = min(V_est[trans.rep$time.h[which((T_obs-S_obs)>0)]<240]),
#            to = max(V_est[trans.rep$time.h[which((T_obs-S_obs)>0)]<240]), add = T)
```
mod<-"model{
for(i in 1:n){
V[i]~dgamma(v_alpha2,v_beta2)
S[i]~dgamma(s_alpha2,s_beta2)
# Set up observation model as acutal values plus observation error
Sobs[i]~dnorm(S[i],tau.to)
Tobs[i]~dnorm(V[i]+S[i],tau.so)
}
# Set some priors (what decisions are made here?)
sig.v~dunif(0,1000)
tau.v <- pow(sig.v,-2)
sig.s~dunif(0,1000)
tau.s <- pow(sig.v,-2)
sig.so~dunif(0,1000)
sig.to~dunif(0,1000)
tau.so <- pow(sig.so,-2)
tau.to <- pow(sig.to,-2)
}"
# Grab the data we want to feed it
#jdata <- list('n' = nrow(trans.rep), 'Sobs' = S_obs, "Tobs" = T_obs, "v_alpha1" = V_par.tr[1],
#        "v_beta1" = V_par.tr[2], "s_alpha1" = S_par.tr[1], "s_beta1" = S_par.tr[2],"v_alpha2" = V_par.eq[1],
#        "v_beta2" = V_par.eq[2], "s_alpha2" = S_par.eq[1], "s_beta2" = S_par.eq[2])
jdata <- list('n' = nrow(trans.rep), 'Sobs' = S_obs, "Tobs" = T_obs,
"v_alpha2" = V_par.eq[1],
"v_beta2" = V_par.eq[2], "s_alpha2" = S_par.eq[1], "s_beta2" = S_par.eq[2])
# Initialize the model
tot.mod <- jags.model(textConnection(mod), data = jdata, n.chains = 5)
# Burn-in: autoupdating until model converges
update(tot.mod, 1000)
fit.mod <- coda.samples(tot.mod, c('V','S','sig.to','sig.so'), n.iter = 5000)
# Get summary of our 5 chains (i.e., number of Markov chains)
f <- summary(fit.mod)
# Look at S values
f$statistics[grep("S",rownames(f$statistics)),]
f$quantiles[grep("S",rownames(f$quantiles)),]
# Look at V values
f$statistics[grep("V",rownames(f$statistics)),]
f$quantiles[grep("V",rownames(f$quantiles)),]
time <- trans.rep$time.d
s.est <- f$statistics[grep("S",rownames(f$statistics)),1]
v.est <- f$statistics[grep("V",rownames(f$statistics)),1]
s.lower <- f$quantiles[grep("S",rownames(f$quantiles)),1]
s.upper <- f$quantiles[grep("S",rownames(f$quantiles)),5]
v.est <- f$statistics[grep("V",rownames(f$statistics)),1]
v.lower <- f$quantiles[grep("V",rownames(f$quantiles)),1]
v.upper <- f$quantiles[grep("V",rownames(f$quantiles)),5]
data2 <- data.frame(time, s.est,s.lower,s.upper, v.est,v.lower,v.upper)
write.table(data2, "data/scout.bayes.repC.txt", sep = "\t", col.names = T, row.names = F)
trans.rep <- trans.D
# Observed total (T) and spore (S) abundances from CFU counts
T_obs <- trans.rep$tot.ab
S_obs <- trans.rep$spo.ab
# Get informative priors for S and vegetative cells (V) based on observed values
# Start by putting a gamma prior on S and V.
# We wil get parameters for those distributions using the method of moments:
# mean(x) = a/b; var(x) = a/b^2
# where a is shape parameter and b is an inverse scale parameter of gamma distribution
# Taking the log of both sides of each equation, we get a system of linear equations
# Let's do this for S_obs for two parts of the time series:
# equilbirum phase (S_par.eq) after 240 hrs and transition phase (S_par.tr) 0-240 hrs.
S_par.eq <- exp(solve(matrix(c(1,1,-1,-2),2,2), matrix(log(c(mean(S_obs[trans.rep$time.h<6000]),
var(S_obs[trans.rep$time.h<6000]))),2,1)))
#
# S_par.tr <- exp(solve(matrix(c(1,1,-1,-2),2,2), matrix(log(c(mean(S_obs[trans.rep$time.h<240]),
#             var(S_obs[trans.rep$time.h<240]))),2,1)))
#
# # Now for V_est (our ugly inital estimate of V where we ignore negatives)
V_est <- (T_obs-S_obs)[which((T_obs-S_obs)<6000)]
V_par.eq <- exp(solve(matrix(c(1,1,-1,-2),2,2),
matrix(log(c(mean(V_est[trans.rep$time.h[which((T_obs-S_obs)>0)]>0]),
var(V_est[trans.rep$time.h[which((T_obs-S_obs)>0)]<6000]))),2,1)))
# V_par.tr<- exp(solve(matrix(c(1,1,-1,-2),2,2),
#             matrix(log(c(mean(V_est[trans.rep$time.h[which((T_obs-S_obs)>0)]<240]),
#             var(V_est[trans.rep$time.h[which((T_obs-S_obs)>0)]<240]))),2,1)))
# Check agreement betwwen hisotgram of observed and curve of gamma priors for equilibrium
# Spore - equilibrium phase
hist(S_obs[trans.rep$time.h<6000], freq = F)
curve(dgamma(x, S_par.eq[1], S_par.eq[2]), from = min(S_obs), to = max(S_obs), add = T)
# Spore - equilibrium phase
hist(V_est[trans.rep$time.h[which((T_obs-S_obs)>0)]<6000], freq = F)
curve(dgamma(x,V_par.eq[1], V_par.eq[2]),
from =min(V_est[trans.rep$time.h[which((T_obs-S_obs)>0)]<6000]),
to = max(V_est[trans.rep$time.h[which((T_obs-S_obs)>0)]<6000]), add = T)
hist(V_est[trans.rep$time.h[which((T_obs-S_obs)>0)]<6000], freq = F)
curve(dgamma(x,V_par.eq[1], V_par.eq[2]),
from =min(V_est[trans.rep$time.h[which((T_obs-S_obs)>0)]<6000]),
to = max(V_est[trans.rep$time.h[which((T_obs-S_obs)>0)]<6000]), add = T)
mod<-"model{
for(i in 1:n){
V[i]~dgamma(v_alpha2,v_beta2)
S[i]~dgamma(s_alpha2,s_beta2)
# Set up observation model as acutal values plus observation error
Sobs[i]~dnorm(S[i],tau.to)
Tobs[i]~dnorm(V[i]+S[i],tau.so)
}
# Set some priors (what decisions are made here?)
sig.v~dunif(0,1000)
tau.v <- pow(sig.v,-2)
sig.s~dunif(0,1000)
tau.s <- pow(sig.v,-2)
sig.so~dunif(0,1000)
sig.to~dunif(0,1000)
tau.so <- pow(sig.so,-2)
tau.to <- pow(sig.to,-2)
}"
# Grab the data we want to feed it
#jdata <- list('n' = nrow(trans.rep), 'Sobs' = S_obs, "Tobs" = T_obs, "v_alpha1" = V_par.tr[1],
#        "v_beta1" = V_par.tr[2], "s_alpha1" = S_par.tr[1], "s_beta1" = S_par.tr[2],"v_alpha2" = V_par.eq[1],
#        "v_beta2" = V_par.eq[2], "s_alpha2" = S_par.eq[1], "s_beta2" = S_par.eq[2])
jdata <- list('n' = nrow(trans.rep), 'Sobs' = S_obs, "Tobs" = T_obs,
"v_alpha2" = V_par.eq[1],
"v_beta2" = V_par.eq[2], "s_alpha2" = S_par.eq[1], "s_beta2" = S_par.eq[2])
# Initialize the model
tot.mod <- jags.model(textConnection(mod), data = jdata, n.chains = 5)
# Burn-in: autoupdating until model converges
update(tot.mod, 1000)
# Get samples from it for what we are intested: V, S and the obs errors
# Creates output with n.iter samples per chain
fit.mod <- coda.samples(tot.mod, c('V','S','sig.to','sig.so'), n.iter = 5000)
f <- summary(fit.mod)
# Look at S values
f$statistics[grep("S",rownames(f$statistics)),]
f$quantiles[grep("S",rownames(f$quantiles)),]
# Look at V values
f$statistics[grep("V",rownames(f$statistics)),]
f$quantiles[grep("V",rownames(f$quantiles)),]
time <- trans.rep$time.d
s.est <- f$statistics[grep("S",rownames(f$statistics)),1]
v.est <- f$statistics[grep("V",rownames(f$statistics)),1]
s.lower <- f$quantiles[grep("S",rownames(f$quantiles)),1]
s.upper <- f$quantiles[grep("S",rownames(f$quantiles)),5]
v.est <- f$statistics[grep("V",rownames(f$statistics)),1]
v.lower <- f$quantiles[grep("V",rownames(f$quantiles)),1]
v.upper <- f$quantiles[grep("V",rownames(f$quantiles)),5]
data2 <- data.frame(time, s.est,s.lower,s.upper, v.est,v.lower,v.upper)
write.table(data2, "data/scout.bayes.repD.txt", sep = "\t", col.names = T, row.names = F)
data.B.A <- read.table("data/scout.bayes.repA.txt", header = TRUE)
data.B.B <- read.table("data/scout.bayes.repB.txt", header = TRUE)
data.B.C <- read.table("data/scout.bayes.repC.txt", header = TRUE)
data.B.D <- read.table("data/scout.bayes.repC.txt", header = TRUE)
data.B <- data.frame(data.B.A[,c(1:2,5)], data.B.B[,c(2,5)], data.B.C[,c(2,5)], data.B.D[,c(2,5)])
colnames(data.B) <- c("time", "Spore.A", "Veg.A", "Spore.B", "Veg.B", "Spore.C", "Veg.C", "Spore.D", "Veg.D")
S.mean <- apply(data.frame(data.B$Spore.A, data.B$Spore.B, data.B$Spore.C, data.B$Spore.D), 1, mean) * 10^4
data.all <- rbind(data.B.A[,c(1:2,5)], data.B.B[,c(1:2,5)], data.B.A[,c(1:2,5)], data.B.A[,c(1:2,5)])
data.all <- data.frame(data.all[,1], (10^4 * data.all[,2:3]))
colnames(data.all) <- c("time", "spore", "veg")
S.sem <- apply(data.frame(data.B$Spore.A, data.B$Spore.B, data.B$Spore.C, data.B$Spore.D), 1, sem) * 10^4
V.mean <- apply(data.frame(data.B$Veg.A, data.B$Veg.B, data.B$Veg.C, data.B$Veg.D), 1, mean) * 10^4
V.sem <- apply(data.frame(data.B$Veg.A, data.B$Veg.B, data.B$Veg.C, data.B$Veg.D), 1, sem) * 10^4
par(mar = c(5, 7, 5, 7))
#https://stackoverflow.com/questions/17932915/how-to-rotate-y-axis-labels-in-twoord-plot-in-r
combo.data <- rbind(data.all, end.data.sum)
#par(bty="n") # deleting the box
gap.plot(combo.data$time, log10(combo.data$veg), gap.axis = "x", gap=c(700, 1500),
type = "p", pch = 21, col="grey80", bgcol = "grey80", bg = "grey80",
xlab = "Time (d)", ylab = "Abundance (CFU/mL)",
ylim = c(4.5, 8.7), xlim = c(-25, 2000), cex.axis = 1.25)
plot(data.all$time, log10(data.all$veg), pch = 21,
bg = "grey80", cex = 1.25, col = "grey80", lwd = 0.75, cex.axis = 1.25,
xlab = NA, ylab = NA, xlim = c(-25, 700), ylim = c(4.5, 8.7), yaxt = "n", xaxt = "n")
points(data.all$time, log10(data.all$spore), pch = 21, lwd = 0.75, col = "grey50",
bg = "grey50", cex = 1.25)
par(mar = c(5, 7, 5, 7))
plot(data.all$time, log10(data.all$veg), pch = 21,
bg = "grey80", cex = 1.25, col = "grey80", lwd = 0.75, cex.axis = 1.25,
xlab = NA, ylab = NA, xlim = c(-25, 200), ylim = c(4.5, 8.7), yaxt = "n", xaxt = "n")
par(mar = c(5, 7, 5, 7))
plot(data.all$time, log10(data.all$veg), pch = 21,
bg = "grey80", cex = 1.25, col = "grey80", lwd = 0.75, cex.axis = 1.25,
xlab = NA, ylab = NA, xlim = c(-25, 300), ylim = c(4.5, 8.7), yaxt = "n", xaxt = "n")
points(data.all$time, log10(data.all$spore), pch = 21, lwd = 0.75, col = "grey50",
bg = "grey50", cex = 1.25)
par(mar = c(5, 7, 5, 7))
plot(data.all$time, log10(data.all$veg), pch = 21,
bg = "grey80", cex = 1.25, col = "grey80", lwd = 0.75, cex.axis = 1.25,
xlab = NA, ylab = NA, xlim = c(-25, 300), ylim = c(5, 8.7), yaxt = "n", xaxt = "n")
points(data.all$time, log10(data.all$spore), pch = 21, lwd = 0.75, col = "grey50",
bg = "grey50", cex = 1.25)
box(lwd = 2)
legend(250, 8.75, c("Spore", "Non-spore"), pch = 21, pt.bg = c("grey50", "grey80"),
col = c("grey50", "grey80"), pt.cex = 1.25, pt.lwd = 0.75, bty = 'n',
y.intersp = 1.5, lwd = 0, x.intersp = -0.5)
par(mar = c(5, 7, 5, 7))
plot(data.all$time, log10(data.all$veg), pch = 21,
bg = "grey80", cex = 1.25, col = "grey80", lwd = 0.75, cex.axis = 1.25,
xlab = NA, ylab = NA, xlim = c(-25, 300), ylim = c(5, 8.7), yaxt = "n", xaxt = "n")
points(data.all$time, log10(data.all$spore), pch = 21, lwd = 0.75, col = "grey50",
bg = "grey50", cex = 1.25)
box(lwd = 2)
legend(200, 8.75, c("Spore", "Non-spore"), pch = 21, pt.bg = c("grey50", "grey80"),
col = c("grey50", "grey80"), pt.cex = 1.25, pt.lwd = 0.75, bty = 'n',
y.intersp = 1.5, lwd = 0, x.intersp = -0.5)
axis(side = 2, lwd.ticks = 2, cex.axis = 1.25, las = 1,
labels = expression(10^5, 10^6, 10^7, 10^8),
at = c(5, 6, 7, 8))
axis(side = 2, lwd.ticks = 2, cex.axis = 1.25, las = 1,
labels = expression(10^5, 10^6, 10^7, 10^8, 10^9),
at = c(5, 6, 7, 8, 9))
par(mar = c(5, 7, 5, 7))
plot(data.all$time, log10(data.all$veg), pch = 21,
bg = "grey80", cex = 1.25, col = "grey80", lwd = 0.75, cex.axis = 1.25,
xlab = NA, ylab = NA, xlim = c(-25, 300), ylim = c(5.5, 9), yaxt = "n", xaxt = "n")
points(data.all$time, log10(data.all$spore), pch = 21, lwd = 0.75, col = "grey50",
bg = "grey50", cex = 1.25)
box(lwd = 2)
legend(200, 8.75, c("Spore", "Non-spore"), pch = 21, pt.bg = c("grey50", "grey80"),
col = c("grey50", "grey80"), pt.cex = 1.25, pt.lwd = 0.75, bty = 'n',
y.intersp = 1.5, lwd = 0, x.intersp = -0.5)
axis(side = 2, lwd.ticks = 2, cex.axis = 1.25, las = 1,
labels = expression(10^5, 10^6, 10^7, 10^8, 10^9),
at = c(5, 6, 7, 8, 9))
par(mar = c(5, 7, 5, 7))
plot(data.all$time, log10(data.all$veg), pch = 21,
bg = "grey80", cex = 1.25, col = "grey80", lwd = 0.75, cex.axis = 1.25,
xlab = NA, ylab = NA, xlim = c(-25, 300), ylim = c(5.5, 8.5), yaxt = "n", xaxt = "n")
points(data.all$time, log10(data.all$spore), pch = 21, lwd = 0.75, col = "grey50",
bg = "grey50", cex = 1.25)
box(lwd = 2)
legend(200, 8.75, c("Spore", "Non-spore"), pch = 21, pt.bg = c("grey50", "grey80"),
col = c("grey50", "grey80"), pt.cex = 1.25, pt.lwd = 0.75, bty = 'n',
y.intersp = 1.5, lwd = 0, x.intersp = -0.5)
axis(side = 2, lwd.ticks = 2, cex.axis = 1.25, las = 1,
labels = expression(10^5, 10^6, 10^7, 10^8, 10^9),
at = c(5, 6, 7, 8, 9))
par(mar = c(5, 7, 5, 7))
plot(data.all$time, log10(data.all$veg), pch = 21,
bg = "grey80", cex = 1.25, col = "grey80", lwd = 0.75, cex.axis = 1.25,
xlab = NA, ylab = NA, xlim = c(-25, 300), ylim = c(5.5, 8.5), yaxt = "n", xaxt = "n")
points(data.all$time, log10(data.all$spore), pch = 21, lwd = 0.75, col = "grey50",
bg = "grey50", cex = 1.25)
box(lwd = 2)
legend(200, 8.25, c("Spore", "Non-spore"), pch = 21, pt.bg = c("grey50", "grey80"),
col = c("grey50", "grey80"), pt.cex = 1.25, pt.lwd = 0.75, bty = 'n',
y.intersp = 1.5, lwd = 0, x.intersp = -0.5)
par(mar = c(5, 7, 5, 7))
plot(data.all$time, log10(data.all$veg), pch = 21,
bg = "grey80", cex = 1.25, col = "grey80", lwd = 0.75, cex.axis = 1.25,
xlab = NA, ylab = NA, xlim = c(-25, 300), ylim = c(5.5, 8.5), yaxt = "n", xaxt = "n")
points(data.all$time, log10(data.all$spore), pch = 21, lwd = 0.75, col = "grey50",
bg = "grey50", cex = 1.25)
box(lwd = 2)
legend(200, 8.5, c("Spore", "Non-spore"), pch = 21, pt.bg = c("grey50", "grey80"),
col = c("grey50", "grey80"), pt.cex = 1.25, pt.lwd = 0.75, bty = 'n',
y.intersp = 1.5, lwd = 0, x.intersp = -0.5)
axis(side = 2, lwd.ticks = 2, cex.axis = 1.25, las = 1,
labels = expression(10^5, 10^6, 10^7, 10^8, 10^9),
at = c(5, 6, 7, 8, 9))
axis(side = 4, lwd.ticks = 2, cex.axis = 1.25,
at=c(5, 6, 7, 8, 9), labels = F)
axis(side = 1, lwd.ticks = 2, cex.axis = 1.25,
at = c(0, 100, 200, 300, 400), labels = T)
axis(side = 3, lwd.ticks = 2, cex.axis = 1.25,
at = c(0, 100, 200, 300, 400), labels = F)
mtext('Time (d)', side = 1, outer = TRUE, cex = 2,
line = -2, adj = 0.5)
mtext(expression('Bacteria (CFU ml'^-1*')'), side = 2, outer = TRUE, cex = 2,
line = -3.5, adj = 0.5)
V.mean
mean(Vmean)/(mean(Vmean)+mean(Vmean))
mean(V.mean)/(mean(S.mean)+mean(V.mean))
alpha2 <- function(a, N, Nmax, Nmin=1)
y = sqrt(pi*Nmin*Nmax)/(2.0*a) * exp((a * log2(sqrt(Nmax/Nmin)))^2.0)
y = y * exp((log(2.0)/(2.0*a))^2.0)
y = y * erf(a * log2(sqrt(Nmax/Nmin)) - log(2.0)/(2.0*a))
y += erf(a * log2(sqrt(Nmax/Nmin)) + log(2.0)/(2.0*a))
y -= N
alpha2 <- function(a, N, Nmax, Nmin=1)
{y = sqrt(pi*Nmin*Nmax)/(2.0*a) * exp((a * log2(sqrt(Nmax/Nmin)))^2.0)
y = y * exp((log(2.0)/(2.0*a))^2.0)
y = y * erf(a * log2(sqrt(Nmax/Nmin)) - log(2.0)/(2.0*a))
y += erf(a * log2(sqrt(Nmax/Nmin)) + log(2.0)/(2.0*a))
y -= N}
require(Hmisc)
y inc(erf(a * log2(sqrt(Nmax/Nmin)) + log(2.0)/(2.0*a)))
y = inc(erf(a * log2(sqrt(Nmax/Nmin)) + log(2.0)/(2.0*a)))
nc(x) <- 10
pi
alpha2 <- function(a, N, Nmax, Nmin=1){
y = sqrt(pi*Nmin*Nmax)/(2.0*a) * exp((a * log2(sqrt(Nmax/Nmin)))^2.0)
}
alpha2(.4,100,1000,Nmin=1)
alpha2(.4,100,1000,1)
alpha2 <- function(a, N, Nmax, Nmin){
y = sqrt(pi*Nmin*Nmax)/(2.0*a) * exp((a * log2(sqrt(Nmax/Nmin)))^2.0)
return(y)
}
alpha(0.4,1000,100,1)
alpha2 <- function(a, N, Nmax, Nmin){
y = sqrt(pi*Nmin*Nmax)/(2.0*a) * exp((a * log2(sqrt(Nmax/Nmin)))^2.0)
return(y)
}
alpha2(10, 1000, 500, 2)
alpha2(10, 1000, 500, 1)
alpha2(10, 1000, 10, 1)
alpha2(10, 100, 10, 1)
alpha2(2, 100, 10, 1)
alpha2 <- function(a, N, Nmax, Nmin){
y = sqrt(pi*Nmin*Nmax)/(2.0*a) * exp((a * log2(sqrt(Nmax/Nmin)))^2.0)
y = y * exp((log(2.0)/(2.0*a))^2.0)
return(y)
}
alpha2 <- function(a, N, Nmax, Nmin){
y = sqrt(pi*Nmin*Nmax)/(2.0*a) * exp((a * log2(sqrt(Nmax/Nmin)))^2.0) # 86904.87
y = y * exp((log(2.0)/(2.0*a))^2.0)
return(y)
}
alpha2(2,100,10, 1)
alpha2 <- function(a, N, Nmax, Nmin){
y = sqrt(pi*Nmin*Nmax)/(2.0*a) * exp((a * log2(sqrt(Nmax/Nmin)))^2.0) # 86904.87
y1 = y * exp((log(2.0)/(2.0*a))^2.0)
return(y1)
}
alpha2(2,100,10, 1)
alpha2 <- function(a, N, Nmax, Nmin){
y = sqrt(pi*Nmin*Nmax)/(2.0*a) * exp((a * log2(sqrt(Nmax/Nmin)))^2.0) # 86904.87
y1 = y * exp((log(2.0)/(2.0*a))^2.0)
return(y1)
}
alpha2(2,100,10, 1)
alpha2 <- function(a, N, Nmax, Nmin){
y = sqrt(pi*Nmin*Nmax)/(2.0*a) * exp((a * log2(sqrt(Nmax/Nmin)))^2.0) # 86904.87
y1 = y * exp((log(2.0)/(2.0*a))^2.0) # 89554.06
y2 = y1 * erf(a * log2(sqrt(Nmax/Nmin)) - log(2.0)/(2.0*a))
return(y2)
}
alpha2(2,100,10, 1)
erf(1)
erf <- function(x) 2 * pnorm(x * sqrt(2)) - 1
alpha2 <- function(a, N, Nmax, Nmin){
y = sqrt(pi*Nmin*Nmax)/(2.0*a) * exp((a * log2(sqrt(Nmax/Nmin)))^2.0) # 86904.87
y1 = y * exp((log(2.0)/(2.0*a))^2.0) # 89554.06
y2 = y1 * erf(a * log2(sqrt(Nmax/Nmin)) - log(2.0)/(2.0*a))
return(y2)
}
alpha2(2,100,10, 1)
alpha2 <- function(a, N, Nmax, Nmin){
y = sqrt(pi*Nmin*Nmax)/(2.0*a) * exp((a * log2(sqrt(Nmax/Nmin)))^2.0) # 86904.87
y1 = y * exp((log(2.0)/(2.0*a))^2.0) # 89554.06
y2 = y1 * erf(a * log2(sqrt(Nmax/Nmin)) - log(2.0)/(2.0*a)) # 89553.3
y3 = inc(y2) <- erf(a * log2(sqrt(Nmax/Nmin)) + log(2.0)/(2.0*a))
return(y3)
}
alpha2(2,100,10, 1)
inc(10)
inc(10) <- 10
inc(1) <- 10
install.packages('roperators')
require(roperators)
alpha2 <- function(a, N, Nmax, Nmin){
y = sqrt(pi*Nmin*Nmax)/(2.0*a) * exp((a * log2(sqrt(Nmax/Nmin)))^2.0) # 86904.87
y1 = y * exp((log(2.0)/(2.0*a))^2.0) # 89554.06
y2 = y1 * erf(a * log2(sqrt(Nmax/Nmin)) - log(2.0)/(2.0*a)) # 89553.3
y3 %+=% erf(a * log2(sqrt(Nmax/Nmin)) + log(2.0)/(2.0*a))
return(y3)
}
alpha2(2,100,10, 1)
alpha2 <- function(a, N, Nmax, Nmin){
y = sqrt(pi*Nmin*Nmax)/(2.0*a) * exp((a * log2(sqrt(Nmax/Nmin)))^2.0) # 86904.87
y1 = y * exp((log(2.0)/(2.0*a))^2.0) # 89554.06
y2 = y1 * erf(a * log2(sqrt(Nmax/Nmin)) - log(2.0)/(2.0*a)) # 89553.3
y3 = %+=% erf(a * log2(sqrt(Nmax/Nmin)) + log(2.0)/(2.0*a))
return(y3)
}
x <- 1:3
x %+=% 1
x
x
x %+=% 1
x
alpha2 <- function(a, N, Nmax, Nmin){
y = sqrt(pi*Nmin*Nmax)/(2.0*a) * exp((a * log2(sqrt(Nmax/Nmin)))^2.0) # 86904.87
y1 = y * exp((log(2.0)/(2.0*a))^2.0) # 89554.06
y2 = y1 * erf(a * log2(sqrt(Nmax/Nmin)) - log(2.0)/(2.0*a)) # 89553.3
y3 = y2 %+=% erf(a * log2(sqrt(Nmax/Nmin)) + log(2.0)/(2.0*a))
return(y3)
}
alpha2(2,100,10, 1)
alpha2 <- function(a, N, Nmax, Nmin){
y = sqrt(pi*Nmin*Nmax)/(2.0*a) * exp((a * log2(sqrt(Nmax/Nmin)))^2.0) # 86904.87
y1 = y * exp((log(2.0)/(2.0*a))^2.0) # 89554.06
y2 = y1 * erf(a * log2(sqrt(Nmax/Nmin)) - log(2.0)/(2.0*a)) # 89553.3
y3 = y2 %+=% erf(a * log2(sqrt(Nmax/Nmin)) + log(2.0)/(2.0*a)) # 89554.3
y4 = y3 %-=%
return(y4)
}
alpha2(2,100,10, 1)
alpha2 <- function(a, N, Nmax, Nmin){
y = sqrt(pi*Nmin*Nmax)/(2.0*a) * exp((a * log2(sqrt(Nmax/Nmin)))^2.0) # 86904.87
y1 = y * exp((log(2.0)/(2.0*a))^2.0) # 89554.06
y2 = y1 * erf(a * log2(sqrt(Nmax/Nmin)) - log(2.0)/(2.0*a)) # 89553.3
y3 = y2 %+=% erf(a * log2(sqrt(Nmax/Nmin)) + log(2.0)/(2.0*a)) # 89554.3
y4 = y3 %-=% N
return(y4)
}
alpha2(2,100,10, 1)
alpha2 <- function(a, N, Nmax, Nmin){
y = sqrt(pi*Nmin*Nmax)/(2.0*a) * exp((a * log2(sqrt(Nmax/Nmin)))^2.0) # 86904.87
y1 = y * exp((log(2.0)/(2.0*a))^2.0) # 89554.06
y2 = y1 * erf(a * log2(sqrt(Nmax/Nmin)) - log(2.0)/(2.0*a)) # 89553.3
y3 = y2 %+=% erf(a * log2(sqrt(Nmax/Nmin)) + log(2.0)/(2.0*a)) # 89554.3
y4 = y3 %-=% N # 89454.3
return(y1,y2,y3,y4)
}
alpha2(2,100,10, 1)
s2 <- function(a, Nmax, Nmin){
y5 = sqrt(pi)/a * exp( (a * log2(sqrt(Nmax/Nmin)))**2)
return(y5)
}
s2 <- function(a, Nmax, Nmin){
y5 = sqrt(pi)/a * exp( (a * log2(sqrt(Nmax/Nmin)))**2)
return(y5)
}
s2(2,10,1)
getNmax <- function(N, b, slope){
y6 = 10^(b + slope*(log10(N)))
return(y6)
}
getNmax(100,0.78,0.37)
